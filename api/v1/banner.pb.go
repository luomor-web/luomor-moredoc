// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/banner.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// banner，轮播图
type Banner struct {
	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Path        string     `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Sort        int32      `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Enable      bool       `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Type        int32      `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Url         string     `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Description string     `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *time.Time `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt   *time.Time `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *Banner) Reset()         { *m = Banner{} }
func (m *Banner) String() string { return proto.CompactTextString(m) }
func (*Banner) ProtoMessage()    {}
func (*Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor_e028cf1a00a0e665, []int{0}
}
func (m *Banner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Banner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Banner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Banner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Banner.Merge(m, src)
}
func (m *Banner) XXX_Size() int {
	return m.Size()
}
func (m *Banner) XXX_DiscardUnknown() {
	xxx_messageInfo_Banner.DiscardUnknown(m)
}

var xxx_messageInfo_Banner proto.InternalMessageInfo

func (m *Banner) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Banner) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Banner) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Banner) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *Banner) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Banner) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Banner) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Banner) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Banner) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Banner) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// 删除横幅
type DeleteBannerRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteBannerRequest) Reset()         { *m = DeleteBannerRequest{} }
func (m *DeleteBannerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBannerRequest) ProtoMessage()    {}
func (*DeleteBannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e028cf1a00a0e665, []int{1}
}
func (m *DeleteBannerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBannerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBannerRequest.Merge(m, src)
}
func (m *DeleteBannerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBannerRequest proto.InternalMessageInfo

func (m *DeleteBannerRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

// 获取横幅
type GetBannerRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetBannerRequest) Reset()         { *m = GetBannerRequest{} }
func (m *GetBannerRequest) String() string { return proto.CompactTextString(m) }
func (*GetBannerRequest) ProtoMessage()    {}
func (*GetBannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e028cf1a00a0e665, []int{2}
}
func (m *GetBannerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBannerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBannerRequest.Merge(m, src)
}
func (m *GetBannerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBannerRequest proto.InternalMessageInfo

func (m *GetBannerRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 横幅列表请求
type ListBannerRequest struct {
	Page   int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size_  int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Type   []int32  `protobuf:"varint,3,rep,packed,name=type,proto3" json:"type,omitempty"`
	Enable []bool   `protobuf:"varint,4,rep,packed,name=enable,proto3" json:"enable,omitempty"`
	Wd     string   `protobuf:"bytes,5,opt,name=wd,proto3" json:"wd,omitempty"`
	Field  []string `protobuf:"bytes,6,rep,name=field,proto3" json:"field,omitempty"`
}

func (m *ListBannerRequest) Reset()         { *m = ListBannerRequest{} }
func (m *ListBannerRequest) String() string { return proto.CompactTextString(m) }
func (*ListBannerRequest) ProtoMessage()    {}
func (*ListBannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e028cf1a00a0e665, []int{3}
}
func (m *ListBannerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBannerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBannerRequest.Merge(m, src)
}
func (m *ListBannerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBannerRequest proto.InternalMessageInfo

func (m *ListBannerRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListBannerRequest) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ListBannerRequest) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ListBannerRequest) GetEnable() []bool {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ListBannerRequest) GetWd() string {
	if m != nil {
		return m.Wd
	}
	return ""
}

func (m *ListBannerRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

// 横幅列表
type ListBannerReply struct {
	Total  int64     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Banner []*Banner `protobuf:"bytes,2,rep,name=banner,proto3" json:"banner,omitempty"`
}

func (m *ListBannerReply) Reset()         { *m = ListBannerReply{} }
func (m *ListBannerReply) String() string { return proto.CompactTextString(m) }
func (*ListBannerReply) ProtoMessage()    {}
func (*ListBannerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e028cf1a00a0e665, []int{4}
}
func (m *ListBannerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBannerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBannerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBannerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBannerReply.Merge(m, src)
}
func (m *ListBannerReply) XXX_Size() int {
	return m.Size()
}
func (m *ListBannerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBannerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListBannerReply proto.InternalMessageInfo

func (m *ListBannerReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListBannerReply) GetBanner() []*Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func init() {
	proto.RegisterType((*Banner)(nil), "api.v1.Banner")
	proto.RegisterType((*DeleteBannerRequest)(nil), "api.v1.DeleteBannerRequest")
	proto.RegisterType((*GetBannerRequest)(nil), "api.v1.GetBannerRequest")
	proto.RegisterType((*ListBannerRequest)(nil), "api.v1.ListBannerRequest")
	proto.RegisterType((*ListBannerReply)(nil), "api.v1.ListBannerReply")
}

func init() { proto.RegisterFile("api/v1/banner.proto", fileDescriptor_e028cf1a00a0e665) }

var fileDescriptor_e028cf1a00a0e665 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x3b, 0xc9, 0x36, 0x36, 0x6f, 0xcb, 0xda, 0xce, 0xd6, 0x3a, 0x4d, 0x25, 0x0d, 0x01,
	0x25, 0xf4, 0x90, 0xd0, 0x8a, 0x17, 0x3d, 0x48, 0xab, 0x22, 0x05, 0xc5, 0x1a, 0xf4, 0xa2, 0x88,
	0x64, 0x9b, 0xe9, 0x1a, 0xc8, 0x66, 0x62, 0x32, 0xdb, 0xb2, 0x1e, 0xbd, 0x0b, 0x05, 0xbf, 0x8a,
	0x07, 0x3f, 0x82, 0xc7, 0x82, 0x17, 0x6f, 0x4a, 0xeb, 0x07, 0x91, 0xcc, 0x4c, 0xb6, 0xbb, 0xd9,
	0x2d, 0x78, 0x7b, 0xff, 0xfe, 0xc8, 0x3c, 0xcf, 0xbb, 0x0b, 0x9d, 0x28, 0x4f, 0x82, 0xe3, 0xed,
	0xa0, 0x1b, 0x65, 0x19, 0x2d, 0xfc, 0xbc, 0x60, 0x9c, 0x61, 0x23, 0xca, 0x13, 0xff, 0x78, 0xdb,
	0xda, 0xec, 0x31, 0xd6, 0x4b, 0x69, 0x20, 0xaa, 0xdd, 0xc1, 0x51, 0xc0, 0x93, 0x3e, 0x2d, 0x79,
	0xd4, 0xcf, 0xe5, 0xa0, 0xb5, 0xda, 0x63, 0x3d, 0x26, 0xc2, 0xa0, 0x8a, 0x54, 0xf5, 0x96, 0x5a,
	0xab, 0xd0, 0x51, 0x96, 0x31, 0x1e, 0xf1, 0x84, 0x65, 0xa5, 0xea, 0x6e, 0x34, 0xa1, 0xb4, 0x9f,
	0xf3, 0xa1, 0x6c, 0xba, 0xdf, 0x35, 0x30, 0xf6, 0xc4, 0xa7, 0xe0, 0x36, 0x68, 0x49, 0x4c, 0x90,
	0x83, 0x3c, 0x3d, 0xd4, 0x92, 0x18, 0xaf, 0xc2, 0x3c, 0x4f, 0x78, 0x4a, 0x89, 0xe6, 0x20, 0xcf,
	0x0c, 0x65, 0x82, 0x31, 0xb4, 0xf2, 0x88, 0x7f, 0x20, 0xba, 0x28, 0x8a, 0xb8, 0xaa, 0x95, 0xac,
	0xe0, 0xa4, 0xe5, 0x20, 0x6f, 0x3e, 0x14, 0x31, 0x5e, 0x03, 0x83, 0x66, 0x51, 0x37, 0xa5, 0x64,
	0xde, 0x41, 0xde, 0x42, 0xa8, 0xb2, 0x6a, 0x96, 0x0f, 0x73, 0x4a, 0x0c, 0x39, 0x5b, 0xc5, 0x78,
	0x19, 0xf4, 0x41, 0x91, 0x92, 0x6b, 0x02, 0x59, 0x85, 0xd8, 0x81, 0xc5, 0x98, 0x96, 0x87, 0x45,
	0x92, 0x57, 0x2f, 0x21, 0x0b, 0xa2, 0x33, 0x5e, 0xc2, 0x0f, 0x01, 0x0e, 0x0b, 0x1a, 0x71, 0x1a,
	0xbf, 0x8f, 0x38, 0x31, 0x1d, 0xe4, 0x2d, 0xee, 0x58, 0xbe, 0x7c, 0xaa, 0x5f, 0x3f, 0xd5, 0x7f,
	0x55, 0xeb, 0xb7, 0xd7, 0x3a, 0xfd, 0xbd, 0x89, 0x42, 0x53, 0xed, 0xec, 0xf2, 0x0a, 0x30, 0xc8,
	0xe3, 0x1a, 0x00, 0xff, 0x0b, 0x50, 0x3b, 0xbb, 0xdc, 0xbd, 0x0d, 0x9d, 0xc7, 0x34, 0xa5, 0x9c,
	0x4a, 0xfd, 0x42, 0xfa, 0x71, 0x40, 0x4b, 0x3e, 0x92, 0x51, 0x97, 0x32, 0xba, 0x2e, 0x2c, 0x3f,
	0xa5, 0x7c, 0xf6, 0x8c, 0x92, 0xda, 0xfd, 0x82, 0x60, 0xe5, 0x59, 0x52, 0x36, 0xa6, 0x84, 0xd4,
	0x3d, 0xaa, 0xe6, 0x44, 0x2c, 0xa4, 0x4e, 0x3e, 0x49, 0x4f, 0xf4, 0x50, 0xc4, 0x23, 0x49, 0x75,
	0x47, 0x1f, 0x49, 0x7a, 0x29, 0x7f, 0xcb, 0xd1, 0xc7, 0xe4, 0x6f, 0x83, 0x76, 0x12, 0x0b, 0x4b,
	0xcc, 0x50, 0x3b, 0x11, 0x26, 0x1f, 0x25, 0x34, 0x8d, 0x89, 0xe1, 0xe8, 0x95, 0xc9, 0x22, 0x71,
	0x5f, 0xc0, 0xf5, 0xf1, 0xcf, 0xc9, 0xd3, 0xa1, 0xb8, 0x06, 0xc6, 0xa3, 0x54, 0x7d, 0x8d, 0x4c,
	0xf0, 0x1d, 0x30, 0xe4, 0x21, 0x13, 0xcd, 0xd1, 0xbd, 0xc5, 0x9d, 0xb6, 0x2f, 0x2f, 0xd9, 0x57,
	0xab, 0xaa, 0xbb, 0xf3, 0x4d, 0x07, 0x53, 0x96, 0x76, 0x0f, 0xf6, 0xf1, 0x3e, 0x2c, 0x3d, 0x12,
	0x3e, 0xd4, 0x97, 0x37, 0xb9, 0x65, 0x35, 0x72, 0x77, 0xfd, 0xf3, 0xcf, 0xbf, 0x5f, 0xb5, 0x8e,
	0xdb, 0x0e, 0x26, 0x7e, 0x3c, 0xf7, 0xd1, 0x16, 0x7e, 0x09, 0x4b, 0xaf, 0x85, 0x23, 0x57, 0xa0,
	0xd6, 0xa6, 0x1c, 0x7d, 0x52, 0x5d, 0x7f, 0x8d, 0xb4, 0x66, 0x20, 0xdf, 0xc2, 0xd2, 0xb8, 0xaf,
	0x78, 0xa3, 0x46, 0xce, 0x70, 0xfb, 0x4a, 0xfe, 0x9a, 0xe0, 0x2f, 0x6f, 0x35, 0xf8, 0xf8, 0x39,
	0x98, 0xa3, 0x6b, 0xc0, 0xa4, 0x26, 0x37, 0x0f, 0x64, 0x4a, 0x01, 0x85, 0xc3, 0x4d, 0xdc, 0x3b,
	0x80, 0x4b, 0xa3, 0xf0, 0x7a, 0xbd, 0x35, 0x75, 0x4b, 0xd6, 0xcd, 0x59, 0xad, 0x3c, 0x1d, 0xba,
	0x1b, 0x82, 0x7c, 0x03, 0x77, 0x26, 0xc9, 0x41, 0x5a, 0xcd, 0xdd, 0xfb, 0x71, 0x6e, 0xa3, 0xb3,
	0x73, 0x1b, 0xfd, 0x39, 0xb7, 0xd1, 0xe9, 0x85, 0x3d, 0x77, 0x76, 0x61, 0xcf, 0xfd, 0xba, 0xb0,
	0xe7, 0x40, 0xfd, 0x63, 0x1d, 0xa0, 0x37, 0x2b, 0x7d, 0x56, 0xd0, 0x98, 0x1d, 0xaa, 0xfd, 0x07,
	0xc7, 0xdb, 0x5d, 0x43, 0x88, 0x71, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xab, 0xf3,
	0x70, 0xec, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BannerAPIClient is the client API for BannerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BannerAPIClient interface {
	// 创建横幅
	CreateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*Banner, error)
	// 更新横幅
	UpdateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除横幅
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询横幅
	GetBanner(ctx context.Context, in *GetBannerRequest, opts ...grpc.CallOption) (*Banner, error)
	// 横幅列表
	ListBanner(ctx context.Context, in *ListBannerRequest, opts ...grpc.CallOption) (*ListBannerReply, error)
}

type bannerAPIClient struct {
	cc *grpc.ClientConn
}

func NewBannerAPIClient(cc *grpc.ClientConn) BannerAPIClient {
	return &bannerAPIClient{cc}
}

func (c *bannerAPIClient) CreateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/api.v1.BannerAPI/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerAPIClient) UpdateBanner(ctx context.Context, in *Banner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.BannerAPI/UpdateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerAPIClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.BannerAPI/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerAPIClient) GetBanner(ctx context.Context, in *GetBannerRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, "/api.v1.BannerAPI/GetBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerAPIClient) ListBanner(ctx context.Context, in *ListBannerRequest, opts ...grpc.CallOption) (*ListBannerReply, error) {
	out := new(ListBannerReply)
	err := c.cc.Invoke(ctx, "/api.v1.BannerAPI/ListBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerAPIServer is the server API for BannerAPI service.
type BannerAPIServer interface {
	// 创建横幅
	CreateBanner(context.Context, *Banner) (*Banner, error)
	// 更新横幅
	UpdateBanner(context.Context, *Banner) (*emptypb.Empty, error)
	// 删除横幅
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	// 查询横幅
	GetBanner(context.Context, *GetBannerRequest) (*Banner, error)
	// 横幅列表
	ListBanner(context.Context, *ListBannerRequest) (*ListBannerReply, error)
}

// UnimplementedBannerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedBannerAPIServer struct {
}

func (*UnimplementedBannerAPIServer) CreateBanner(ctx context.Context, req *Banner) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (*UnimplementedBannerAPIServer) UpdateBanner(ctx context.Context, req *Banner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (*UnimplementedBannerAPIServer) DeleteBanner(ctx context.Context, req *DeleteBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (*UnimplementedBannerAPIServer) GetBanner(ctx context.Context, req *GetBannerRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (*UnimplementedBannerAPIServer) ListBanner(ctx context.Context, req *ListBannerRequest) (*ListBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBanner not implemented")
}

func RegisterBannerAPIServer(s *grpc.Server, srv BannerAPIServer) {
	s.RegisterService(&_BannerAPI_serviceDesc, srv)
}

func _BannerAPI_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Banner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerAPIServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BannerAPI/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerAPIServer).CreateBanner(ctx, req.(*Banner))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerAPI_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Banner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerAPIServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BannerAPI/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerAPIServer).UpdateBanner(ctx, req.(*Banner))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerAPI_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerAPIServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BannerAPI/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerAPIServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerAPI_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerAPIServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BannerAPI/GetBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerAPIServer).GetBanner(ctx, req.(*GetBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerAPI_ListBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerAPIServer).ListBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BannerAPI/ListBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerAPIServer).ListBanner(ctx, req.(*ListBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BannerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.BannerAPI",
	HandlerType: (*BannerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanner",
			Handler:    _BannerAPI_CreateBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _BannerAPI_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _BannerAPI_DeleteBanner_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _BannerAPI_GetBanner_Handler,
		},
		{
			MethodName: "ListBanner",
			Handler:    _BannerAPI_ListBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/banner.proto",
}

func (m *Banner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Banner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Banner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintBanner(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintBanner(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Sort != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBannerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBannerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBannerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA4 := make([]byte, len(m.Id)*10)
		var j3 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBanner(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBannerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBannerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBannerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBannerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBannerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBannerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field[iNdEx])
			copy(dAtA[i:], m.Field[iNdEx])
			i = encodeVarintBanner(dAtA, i, uint64(len(m.Field[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Wd) > 0 {
		i -= len(m.Wd)
		copy(dAtA[i:], m.Wd)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Wd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Enable) > 0 {
		for iNdEx := len(m.Enable) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Enable[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Enable)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		dAtA6 := make([]byte, len(m.Type)*10)
		var j5 int
		for _, num1 := range m.Type {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintBanner(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBannerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBannerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBannerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Banner) > 0 {
		for iNdEx := len(m.Banner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Banner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBanner(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBanner(dAtA []byte, offset int, v uint64) int {
	offset -= sovBanner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Banner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBanner(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovBanner(uint64(m.Sort))
	}
	if m.Enable {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovBanner(uint64(m.Type))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovBanner(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovBanner(uint64(l))
	}
	return n
}

func (m *DeleteBannerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovBanner(uint64(e))
		}
		n += 1 + sovBanner(uint64(l)) + l
	}
	return n
}

func (m *GetBannerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBanner(uint64(m.Id))
	}
	return n
}

func (m *ListBannerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovBanner(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovBanner(uint64(m.Size_))
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovBanner(uint64(e))
		}
		n += 1 + sovBanner(uint64(l)) + l
	}
	if len(m.Enable) > 0 {
		n += 1 + sovBanner(uint64(len(m.Enable))) + len(m.Enable)*1
	}
	l = len(m.Wd)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	if len(m.Field) > 0 {
		for _, s := range m.Field {
			l = len(s)
			n += 1 + l + sovBanner(uint64(l))
		}
	}
	return n
}

func (m *ListBannerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovBanner(uint64(m.Total))
	}
	if len(m.Banner) > 0 {
		for _, e := range m.Banner {
			l = e.Size()
			n += 1 + l + sovBanner(uint64(l))
		}
	}
	return n
}

func sovBanner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBanner(x uint64) (n int) {
	return sovBanner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Banner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBannerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBannerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBannerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBanner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBanner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBanner
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBanner
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBanner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBannerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBannerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBannerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBannerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBannerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBannerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBanner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBanner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBanner
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBanner
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBanner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBanner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enable = append(m.Enable, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBanner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBanner
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBanner
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Enable) == 0 {
					m.Enable = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBanner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enable = append(m.Enable, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBannerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBannerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBannerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = append(m.Banner, &Banner{})
			if err := m.Banner[len(m.Banner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBanner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBanner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBanner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBanner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBanner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBanner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBanner = fmt.Errorf("proto: unexpected end of group")
)
