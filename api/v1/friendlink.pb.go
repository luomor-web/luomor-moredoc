// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/friendlink.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 友情链接
type Friendlink struct {
	Id          int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Link        string     `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Description string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Sort        int32      `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Enable      bool       `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	CreatedAt   *time.Time `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt   *time.Time `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *Friendlink) Reset()         { *m = Friendlink{} }
func (m *Friendlink) String() string { return proto.CompactTextString(m) }
func (*Friendlink) ProtoMessage()    {}
func (*Friendlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63ace7f53d1b08a, []int{0}
}
func (m *Friendlink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friendlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friendlink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friendlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friendlink.Merge(m, src)
}
func (m *Friendlink) XXX_Size() int {
	return m.Size()
}
func (m *Friendlink) XXX_DiscardUnknown() {
	xxx_messageInfo_Friendlink.DiscardUnknown(m)
}

var xxx_messageInfo_Friendlink proto.InternalMessageInfo

func (m *Friendlink) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Friendlink) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Friendlink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Friendlink) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Friendlink) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *Friendlink) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Friendlink) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Friendlink) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// 删除友情链接
type DeleteFriendlinkRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteFriendlinkRequest) Reset()         { *m = DeleteFriendlinkRequest{} }
func (m *DeleteFriendlinkRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFriendlinkRequest) ProtoMessage()    {}
func (*DeleteFriendlinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63ace7f53d1b08a, []int{1}
}
func (m *DeleteFriendlinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFriendlinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFriendlinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFriendlinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFriendlinkRequest.Merge(m, src)
}
func (m *DeleteFriendlinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFriendlinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFriendlinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFriendlinkRequest proto.InternalMessageInfo

func (m *DeleteFriendlinkRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

// 获取友情链接
type GetFriendlinkRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFriendlinkRequest) Reset()         { *m = GetFriendlinkRequest{} }
func (m *GetFriendlinkRequest) String() string { return proto.CompactTextString(m) }
func (*GetFriendlinkRequest) ProtoMessage()    {}
func (*GetFriendlinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63ace7f53d1b08a, []int{2}
}
func (m *GetFriendlinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFriendlinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFriendlinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFriendlinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFriendlinkRequest.Merge(m, src)
}
func (m *GetFriendlinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFriendlinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFriendlinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFriendlinkRequest proto.InternalMessageInfo

func (m *GetFriendlinkRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 友情链接列表
type ListFriendlinkRequest struct {
	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size_  int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Wd     string   `protobuf:"bytes,3,opt,name=wd,proto3" json:"wd,omitempty"`
	Enable []bool   `protobuf:"varint,4,rep,packed,name=enable,proto3" json:"enable,omitempty"`
	Field  []string `protobuf:"bytes,5,rep,name=field,proto3" json:"field,omitempty"`
}

func (m *ListFriendlinkRequest) Reset()         { *m = ListFriendlinkRequest{} }
func (m *ListFriendlinkRequest) String() string { return proto.CompactTextString(m) }
func (*ListFriendlinkRequest) ProtoMessage()    {}
func (*ListFriendlinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63ace7f53d1b08a, []int{3}
}
func (m *ListFriendlinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFriendlinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFriendlinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFriendlinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFriendlinkRequest.Merge(m, src)
}
func (m *ListFriendlinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFriendlinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFriendlinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFriendlinkRequest proto.InternalMessageInfo

func (m *ListFriendlinkRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListFriendlinkRequest) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ListFriendlinkRequest) GetWd() string {
	if m != nil {
		return m.Wd
	}
	return ""
}

func (m *ListFriendlinkRequest) GetEnable() []bool {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ListFriendlinkRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

// 友情链接列表
type ListFriendlinkReply struct {
	Friendlink []*Friendlink `protobuf:"bytes,1,rep,name=friendlink,proto3" json:"friendlink,omitempty"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListFriendlinkReply) Reset()         { *m = ListFriendlinkReply{} }
func (m *ListFriendlinkReply) String() string { return proto.CompactTextString(m) }
func (*ListFriendlinkReply) ProtoMessage()    {}
func (*ListFriendlinkReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b63ace7f53d1b08a, []int{4}
}
func (m *ListFriendlinkReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFriendlinkReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFriendlinkReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFriendlinkReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFriendlinkReply.Merge(m, src)
}
func (m *ListFriendlinkReply) XXX_Size() int {
	return m.Size()
}
func (m *ListFriendlinkReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFriendlinkReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListFriendlinkReply proto.InternalMessageInfo

func (m *ListFriendlinkReply) GetFriendlink() []*Friendlink {
	if m != nil {
		return m.Friendlink
	}
	return nil
}

func (m *ListFriendlinkReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*Friendlink)(nil), "api.v1.Friendlink")
	proto.RegisterType((*DeleteFriendlinkRequest)(nil), "api.v1.DeleteFriendlinkRequest")
	proto.RegisterType((*GetFriendlinkRequest)(nil), "api.v1.GetFriendlinkRequest")
	proto.RegisterType((*ListFriendlinkRequest)(nil), "api.v1.ListFriendlinkRequest")
	proto.RegisterType((*ListFriendlinkReply)(nil), "api.v1.ListFriendlinkReply")
}

func init() { proto.RegisterFile("api/v1/friendlink.proto", fileDescriptor_b63ace7f53d1b08a) }

var fileDescriptor_b63ace7f53d1b08a = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xbb, 0xb6, 0x93, 0xb7, 0x9d, 0xaa, 0x55, 0xdf, 0x25, 0x34, 0xc6, 0x6d, 0x1d, 0xcb,
	0x07, 0x14, 0x7a, 0xb0, 0xd5, 0x20, 0x2e, 0x70, 0x40, 0x2d, 0xff, 0x84, 0xc4, 0xa1, 0xb2, 0xe0,
	0x00, 0x52, 0x55, 0xb9, 0xf5, 0xd6, 0x5a, 0xe1, 0x78, 0x8d, 0xbd, 0x49, 0x95, 0x4a, 0x48, 0x88,
	0x4f, 0x50, 0x09, 0x89, 0xcf, 0xc4, 0xb1, 0x12, 0x17, 0x6e, 0xa0, 0x84, 0x0f, 0x82, 0xbc, 0x5e,
	0x37, 0x6e, 0xe2, 0x08, 0x6e, 0xb3, 0xb3, 0x33, 0xbf, 0xf1, 0x3e, 0xf3, 0x24, 0xd0, 0xf6, 0x13,
	0xea, 0x0e, 0xf7, 0xdc, 0xb3, 0x94, 0x92, 0x38, 0x88, 0x68, 0xfc, 0xde, 0x49, 0x52, 0xc6, 0x19,
	0x6e, 0xfa, 0x09, 0x75, 0x86, 0x7b, 0x46, 0x27, 0x64, 0x2c, 0x8c, 0x88, 0x2b, 0xb2, 0x27, 0x83,
	0x33, 0x97, 0xd3, 0x3e, 0xc9, 0xb8, 0xdf, 0x4f, 0x8a, 0x42, 0xa3, 0x15, 0xb2, 0x90, 0x89, 0xd0,
	0xcd, 0x23, 0x99, 0xdd, 0x96, 0x6d, 0x39, 0xde, 0x8f, 0x63, 0xc6, 0x7d, 0x4e, 0x59, 0x9c, 0xc9,
	0xdb, 0xad, 0x59, 0x28, 0xe9, 0x27, 0x7c, 0x54, 0x5c, 0xda, 0x5f, 0x15, 0x80, 0xe7, 0xd7, 0x9f,
	0x83, 0xd7, 0x41, 0xa1, 0x81, 0x8e, 0x2c, 0xd4, 0x6d, 0x78, 0x0a, 0x0d, 0x70, 0x0b, 0x1a, 0x9c,
	0xf2, 0x88, 0xe8, 0x8a, 0x85, 0xba, 0x2b, 0x5e, 0x71, 0xc0, 0x18, 0xb4, 0xbc, 0x5a, 0x57, 0x45,
	0x52, 0xc4, 0xd8, 0x82, 0xd5, 0x80, 0x64, 0xa7, 0x29, 0x4d, 0xf2, 0xd9, 0xba, 0x26, 0xae, 0xaa,
	0xa9, 0xbc, 0x2b, 0x63, 0x29, 0xd7, 0x1b, 0x82, 0x2e, 0x62, 0xbc, 0x09, 0x4d, 0x12, 0xfb, 0x27,
	0x11, 0xd1, 0x9b, 0x16, 0xea, 0x2e, 0x7b, 0xf2, 0x84, 0x1f, 0x03, 0x9c, 0xa6, 0xc4, 0xe7, 0x24,
	0x38, 0xf6, 0xb9, 0xfe, 0x9f, 0x85, 0xba, 0xab, 0x3d, 0xc3, 0x29, 0x1e, 0xe2, 0x94, 0x0f, 0x71,
	0x5e, 0x97, 0xea, 0x1c, 0x68, 0x97, 0x3f, 0x3b, 0xc8, 0x5b, 0x91, 0x3d, 0xfb, 0x3c, 0x07, 0x0c,
	0x92, 0xa0, 0x04, 0x2c, 0xff, 0x2b, 0x40, 0xf6, 0xec, 0x73, 0xfb, 0x1e, 0xb4, 0x9f, 0x92, 0x88,
	0x70, 0x32, 0x55, 0xc7, 0x23, 0x1f, 0x06, 0x24, 0xe3, 0xd7, 0x22, 0xa9, 0x5d, 0x35, 0x17, 0xc9,
	0xbe, 0x0b, 0xad, 0x17, 0x84, 0x2f, 0xae, 0x43, 0xb2, 0xee, 0x23, 0xdc, 0x7e, 0x45, 0xb3, 0x9a,
	0x42, 0x0c, 0x5a, 0xe2, 0x87, 0x44, 0xea, 0x2e, 0x62, 0xa1, 0x16, 0xbd, 0x28, 0x84, 0xcf, 0xd5,
	0xa2, 0x17, 0x24, 0x07, 0x9e, 0x07, 0x52, 0x75, 0xe5, 0x3c, 0xa8, 0xa8, 0xa7, 0x59, 0x6a, 0x45,
	0xbd, 0x16, 0x34, 0xce, 0x28, 0x89, 0x02, 0xbd, 0x61, 0xa9, 0xf9, 0xd6, 0xc4, 0xc1, 0x3e, 0x86,
	0x5b, 0xb3, 0xe3, 0x93, 0x68, 0x84, 0x7b, 0x00, 0x53, 0x3f, 0x8a, 0x57, 0xad, 0xf6, 0xb0, 0x53,
	0x18, 0xd2, 0xa9, 0x14, 0x57, 0xaa, 0x84, 0x2d, 0x18, 0xf7, 0x23, 0xf1, 0x75, 0xaa, 0x57, 0x1c,
	0x7a, 0x9f, 0x34, 0x58, 0x9b, 0x36, 0xec, 0x1f, 0xbe, 0xc4, 0x6f, 0x61, 0xe3, 0x89, 0x58, 0x49,
	0xc5, 0x62, 0x35, 0x6c, 0xa3, 0x26, 0x67, 0xef, 0x7c, 0xfe, 0xfe, 0xfb, 0x8b, 0xd2, 0xb6, 0xb1,
	0x3b, 0xf7, 0xab, 0x79, 0x88, 0x76, 0xf1, 0x11, 0x6c, 0xbc, 0x11, 0xcb, 0xfa, 0x0b, 0x7a, 0x73,
	0x6e, 0xe9, 0xcf, 0x72, 0xfb, 0x97, 0x78, 0x63, 0x01, 0x3e, 0x84, 0x8d, 0xd9, 0xf5, 0xe3, 0x4e,
	0x89, 0x5f, 0x60, 0x8c, 0x85, 0xb3, 0x0c, 0x31, 0xab, 0xb5, 0x5b, 0x33, 0x0b, 0x1f, 0xc1, 0xda,
	0x0d, 0xf3, 0xe0, 0xed, 0x72, 0x4a, 0x9d, 0xa7, 0x6a, 0x95, 0x92, 0x78, 0x5c, 0x87, 0xef, 0xc3,
	0xfa, 0xcd, 0xa5, 0xe3, 0x9d, 0x92, 0x50, 0xeb, 0x45, 0x63, 0x6b, 0xd1, 0x75, 0x12, 0x8d, 0xec,
	0x8e, 0x98, 0x74, 0x07, 0xb7, 0xe7, 0x27, 0xb9, 0x11, 0xcd, 0xf8, 0xc1, 0x83, 0x6f, 0x63, 0x13,
	0x5d, 0x8d, 0x4d, 0xf4, 0x6b, 0x6c, 0xa2, 0xcb, 0x89, 0xb9, 0x74, 0x35, 0x31, 0x97, 0x7e, 0x4c,
	0xcc, 0x25, 0x90, 0x7f, 0x71, 0x87, 0xe8, 0xdd, 0xff, 0x7d, 0x96, 0x92, 0x80, 0x9d, 0x4a, 0xc6,
	0xa3, 0xe1, 0xde, 0x49, 0x53, 0x08, 0x76, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x7d,
	0x7b, 0xf2, 0x21, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FriendlinkAPIClient is the client API for FriendlinkAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FriendlinkAPIClient interface {
	// 创建友情链接
	CreateFriendlink(ctx context.Context, in *Friendlink, opts ...grpc.CallOption) (*Friendlink, error)
	// 更新友情链接
	UpdateFriendlink(ctx context.Context, in *Friendlink, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除友情链接
	DeleteFriendlink(ctx context.Context, in *DeleteFriendlinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取友情链接
	GetFriendlink(ctx context.Context, in *GetFriendlinkRequest, opts ...grpc.CallOption) (*Friendlink, error)
	// 获取友情链接
	ListFriendlink(ctx context.Context, in *ListFriendlinkRequest, opts ...grpc.CallOption) (*ListFriendlinkReply, error)
}

type friendlinkAPIClient struct {
	cc *grpc.ClientConn
}

func NewFriendlinkAPIClient(cc *grpc.ClientConn) FriendlinkAPIClient {
	return &friendlinkAPIClient{cc}
}

func (c *friendlinkAPIClient) CreateFriendlink(ctx context.Context, in *Friendlink, opts ...grpc.CallOption) (*Friendlink, error) {
	out := new(Friendlink)
	err := c.cc.Invoke(ctx, "/api.v1.FriendlinkAPI/CreateFriendlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendlinkAPIClient) UpdateFriendlink(ctx context.Context, in *Friendlink, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.FriendlinkAPI/UpdateFriendlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendlinkAPIClient) DeleteFriendlink(ctx context.Context, in *DeleteFriendlinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.FriendlinkAPI/DeleteFriendlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendlinkAPIClient) GetFriendlink(ctx context.Context, in *GetFriendlinkRequest, opts ...grpc.CallOption) (*Friendlink, error) {
	out := new(Friendlink)
	err := c.cc.Invoke(ctx, "/api.v1.FriendlinkAPI/GetFriendlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendlinkAPIClient) ListFriendlink(ctx context.Context, in *ListFriendlinkRequest, opts ...grpc.CallOption) (*ListFriendlinkReply, error) {
	out := new(ListFriendlinkReply)
	err := c.cc.Invoke(ctx, "/api.v1.FriendlinkAPI/ListFriendlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendlinkAPIServer is the server API for FriendlinkAPI service.
type FriendlinkAPIServer interface {
	// 创建友情链接
	CreateFriendlink(context.Context, *Friendlink) (*Friendlink, error)
	// 更新友情链接
	UpdateFriendlink(context.Context, *Friendlink) (*emptypb.Empty, error)
	// 删除友情链接
	DeleteFriendlink(context.Context, *DeleteFriendlinkRequest) (*emptypb.Empty, error)
	// 获取友情链接
	GetFriendlink(context.Context, *GetFriendlinkRequest) (*Friendlink, error)
	// 获取友情链接
	ListFriendlink(context.Context, *ListFriendlinkRequest) (*ListFriendlinkReply, error)
}

// UnimplementedFriendlinkAPIServer can be embedded to have forward compatible implementations.
type UnimplementedFriendlinkAPIServer struct {
}

func (*UnimplementedFriendlinkAPIServer) CreateFriendlink(ctx context.Context, req *Friendlink) (*Friendlink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendlink not implemented")
}
func (*UnimplementedFriendlinkAPIServer) UpdateFriendlink(ctx context.Context, req *Friendlink) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendlink not implemented")
}
func (*UnimplementedFriendlinkAPIServer) DeleteFriendlink(ctx context.Context, req *DeleteFriendlinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendlink not implemented")
}
func (*UnimplementedFriendlinkAPIServer) GetFriendlink(ctx context.Context, req *GetFriendlinkRequest) (*Friendlink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendlink not implemented")
}
func (*UnimplementedFriendlinkAPIServer) ListFriendlink(ctx context.Context, req *ListFriendlinkRequest) (*ListFriendlinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriendlink not implemented")
}

func RegisterFriendlinkAPIServer(s *grpc.Server, srv FriendlinkAPIServer) {
	s.RegisterService(&_FriendlinkAPI_serviceDesc, srv)
}

func _FriendlinkAPI_CreateFriendlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendlink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendlinkAPIServer).CreateFriendlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FriendlinkAPI/CreateFriendlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendlinkAPIServer).CreateFriendlink(ctx, req.(*Friendlink))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendlinkAPI_UpdateFriendlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendlink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendlinkAPIServer).UpdateFriendlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FriendlinkAPI/UpdateFriendlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendlinkAPIServer).UpdateFriendlink(ctx, req.(*Friendlink))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendlinkAPI_DeleteFriendlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendlinkAPIServer).DeleteFriendlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FriendlinkAPI/DeleteFriendlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendlinkAPIServer).DeleteFriendlink(ctx, req.(*DeleteFriendlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendlinkAPI_GetFriendlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendlinkAPIServer).GetFriendlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FriendlinkAPI/GetFriendlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendlinkAPIServer).GetFriendlink(ctx, req.(*GetFriendlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendlinkAPI_ListFriendlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendlinkAPIServer).ListFriendlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FriendlinkAPI/ListFriendlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendlinkAPIServer).ListFriendlink(ctx, req.(*ListFriendlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FriendlinkAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.FriendlinkAPI",
	HandlerType: (*FriendlinkAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendlink",
			Handler:    _FriendlinkAPI_CreateFriendlink_Handler,
		},
		{
			MethodName: "UpdateFriendlink",
			Handler:    _FriendlinkAPI_UpdateFriendlink_Handler,
		},
		{
			MethodName: "DeleteFriendlink",
			Handler:    _FriendlinkAPI_DeleteFriendlink_Handler,
		},
		{
			MethodName: "GetFriendlink",
			Handler:    _FriendlinkAPI_GetFriendlink_Handler,
		},
		{
			MethodName: "ListFriendlink",
			Handler:    _FriendlinkAPI_ListFriendlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/friendlink.proto",
}

func (m *Friendlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friendlink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friendlink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintFriendlink(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintFriendlink(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Sort != 0 {
		i = encodeVarintFriendlink(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFriendlink(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintFriendlink(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFriendlink(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFriendlink(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFriendlinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFriendlinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFriendlinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA4 := make([]byte, len(m.Id)*10)
		var j3 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintFriendlink(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFriendlinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendlinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFriendlinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintFriendlink(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListFriendlinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFriendlinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFriendlinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field[iNdEx])
			copy(dAtA[i:], m.Field[iNdEx])
			i = encodeVarintFriendlink(dAtA, i, uint64(len(m.Field[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Enable) > 0 {
		for iNdEx := len(m.Enable) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Enable[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintFriendlink(dAtA, i, uint64(len(m.Enable)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Wd) > 0 {
		i -= len(m.Wd)
		copy(dAtA[i:], m.Wd)
		i = encodeVarintFriendlink(dAtA, i, uint64(len(m.Wd)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintFriendlink(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintFriendlink(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListFriendlinkReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFriendlinkReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFriendlinkReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintFriendlink(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Friendlink) > 0 {
		for iNdEx := len(m.Friendlink) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Friendlink[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFriendlink(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFriendlink(dAtA []byte, offset int, v uint64) int {
	offset -= sovFriendlink(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Friendlink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFriendlink(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFriendlink(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovFriendlink(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFriendlink(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovFriendlink(uint64(m.Sort))
	}
	if m.Enable {
		n += 2
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovFriendlink(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovFriendlink(uint64(l))
	}
	return n
}

func (m *DeleteFriendlinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovFriendlink(uint64(e))
		}
		n += 1 + sovFriendlink(uint64(l)) + l
	}
	return n
}

func (m *GetFriendlinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFriendlink(uint64(m.Id))
	}
	return n
}

func (m *ListFriendlinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovFriendlink(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovFriendlink(uint64(m.Size_))
	}
	l = len(m.Wd)
	if l > 0 {
		n += 1 + l + sovFriendlink(uint64(l))
	}
	if len(m.Enable) > 0 {
		n += 1 + sovFriendlink(uint64(len(m.Enable))) + len(m.Enable)*1
	}
	if len(m.Field) > 0 {
		for _, s := range m.Field {
			l = len(s)
			n += 1 + l + sovFriendlink(uint64(l))
		}
	}
	return n
}

func (m *ListFriendlinkReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Friendlink) > 0 {
		for _, e := range m.Friendlink {
			l = e.Size()
			n += 1 + l + sovFriendlink(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovFriendlink(uint64(m.Total))
	}
	return n
}

func sovFriendlink(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFriendlink(x uint64) (n int) {
	return sovFriendlink(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Friendlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendlink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friendlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friendlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriendlink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriendlink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFriendlinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendlink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFriendlinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFriendlinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriendlink
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriendlink
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFriendlink
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFriendlink
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriendlink
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriendlink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriendlink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendlinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendlink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFriendlinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFriendlinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriendlink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriendlink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFriendlinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendlink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFriendlinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFriendlinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriendlink
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enable = append(m.Enable, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriendlink
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFriendlink
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFriendlink
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Enable) == 0 {
					m.Enable = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriendlink
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enable = append(m.Enable, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriendlink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriendlink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFriendlinkReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendlink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFriendlinkReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFriendlinkReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friendlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendlink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendlink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friendlink = append(m.Friendlink, &Friendlink{})
			if err := m.Friendlink[len(m.Friendlink)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriendlink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriendlink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFriendlink(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFriendlink
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriendlink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFriendlink
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFriendlink
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFriendlink
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFriendlink        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFriendlink          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFriendlink = fmt.Errorf("proto: unexpected end of group")
)
